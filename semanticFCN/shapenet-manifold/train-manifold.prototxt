#----------------------------------------------------------------------------------------------------------------------#
#                                                Data layers
#----------------------------------------------------------------------------------------------------------------------#

layer {
  name: "data"
  type: "Python"
  top: "data"
  top: "label"
  top: "manifold_coord"
  python_param {
    module: "shapenet_layers"
    layer: "SHAPENETSegDataLayer"
    param_str: "{\'shapenet_dir\': \'../../datasets/image_embedding\', \'label_list\': \'seg_file_list\', \'img_list\': \'image_list\', \'batch_size\': 10, \'seed\': 1337, \'split\': \'train\', \'rescale_image\': 1, \'rescale_size\': (225, 350), \'mean\': (104.00699, 116.66877, 122.67892)}"
  }
}


#----------------------------------------------------------------------------------------------------------------------#
#                                  FCN-8s Semantic segmentation layers for each part
#----------------------------------------------------------------------------------------------------------------------#

######  FIRST STAGE - FCN-8s Semantic Segmentation  #####
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 100
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "conv1_1"
  top: "conv1_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3_3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv4_1"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu4_1"
  type: "ReLU"
  bottom: "conv4_1"
  top: "conv4_1"
}
layer {
  name: "conv4_2"
  type: "Convolution"
  bottom: "conv4_1"
  top: "conv4_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu4_2"
  type: "ReLU"
  bottom: "conv4_2"
  top: "conv4_2"
}
layer {
  name: "conv4_3"
  type: "Convolution"
  bottom: "conv4_2"
  top: "conv4_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu4_3"
  type: "ReLU"
  bottom: "conv4_3"
  top: "conv4_3"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4_3"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv5_1"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5_1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu5_1"
  type: "ReLU"
  bottom: "conv5_1"
  top: "conv5_1"
}
layer {
  name: "conv5_2"
  type: "Convolution"
  bottom: "conv5_1"
  top: "conv5_2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu5_2"
  type: "ReLU"
  bottom: "conv5_2"
  top: "conv5_2"
}
layer {
  name: "conv5_3"
  type: "Convolution"
  bottom: "conv5_2"
  top: "conv5_3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "relu5_3"
  type: "ReLU"
  bottom: "conv5_3"
  top: "conv5_3"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5_3"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "Convolution"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    pad: 0
    kernel_size: 7
    stride: 1
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "Convolution"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4096
    pad: 0
    kernel_size: 1
    stride: 1
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "score_fr"
  type: "Convolution"
  bottom: "fc7"
  top: "score_fr"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 5
    pad: 0
    kernel_size: 1
  }
}
layer {
  name: "upscore2"
  type: "Deconvolution"
  bottom: "score_fr"
  top: "upscore2"
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 5
    bias_term: false
    kernel_size: 4
    stride: 2
  }
}
layer {
  name: "scale_pool4"
  type: "Scale"
  bottom: "pool4"
  top: "scale_pool4"
  param {
    lr_mult: 0
  }
  scale_param {
    filler {
      type: "constant"
      value: 0.01
    }
  }
}
layer {
  name: "score_pool4"
  type: "Convolution"
  bottom: "scale_pool4"
  top: "score_pool4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 5
    pad: 0
    kernel_size: 1
  }
}
layer {
  name: "score_pool4c"
  type: "Crop"
  bottom: "score_pool4"
  bottom: "upscore2"
  top: "score_pool4c"
  crop_param {
    axis: 2
    offset: 5
  }
}
layer {
  name: "fuse_pool4"
  type: "Eltwise"
  bottom: "upscore2"
  bottom: "score_pool4c"
  top: "fuse_pool4"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "upscore_pool4"
  type: "Deconvolution"
  bottom: "fuse_pool4"
  top: "upscore_pool4"
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 5
    bias_term: false
    kernel_size: 4
    stride: 2
  }
}
layer {
  name: "scale_pool3"
  type: "Scale"
  bottom: "pool3"
  top: "scale_pool3"
  param {
    lr_mult: 0
  }
  scale_param {
    filler {
      type: "constant"
      value: 0.0001
    }
  }
}
layer {
  name: "score_pool3"
  type: "Convolution"
  bottom: "scale_pool3"
  top: "score_pool3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 5
    pad: 0
    kernel_size: 1
  }
}
layer {
  name: "score_pool3c"
  type: "Crop"
  bottom: "score_pool3"
  bottom: "upscore_pool4"
  top: "score_pool3c"
  crop_param {
    axis: 2
    offset: 9
  }
}
layer {
  name: "fuse_pool3"
  type: "Eltwise"
  bottom: "upscore_pool4"
  bottom: "score_pool3c"
  top: "fuse_pool3"
  eltwise_param {
    operation: SUM
  }
}
layer {
  name: "upscore8"
  type: "Deconvolution"
  bottom: "fuse_pool3"
  top: "upscore8"
  param {
    lr_mult: 0
  }
  convolution_param {
    num_output: 5
    bias_term: false
    kernel_size: 16
    stride: 8
  }
}
layer {
  name: "score"
  type: "Crop"
  bottom: "upscore8"
  bottom: "data"
  top: "score"
  crop_param {
    axis: 2
    offset: 31
  }
}


#----------------------------------------------------------------------------------------------------------------------#
#                                                Reshaping layers
#----------------------------------------------------------------------------------------------------------------------#

layer {
  name: "slice"
  type: "Slice"
  bottom: "score"
  top: "channel_background"
  top: "channel_part1"
  top: "channel_part2"
  top: "channel_part3"
  top: "channel_part4"
  slice_param {
    axis: 1
    slice_point: 1
    slice_point: 2
    slice_point: 3
    slice_point: 4
  }
}
layer {
  name: "concat_batch"
  type: "Concat"
  bottom: "data"
  bottom: "channel_background"
  bottom: "channel_part1"
  bottom: "channel_part2"
  bottom: "channel_part3"
  bottom: "channel_part4"
  top: "concat_data"
  concat_param {
    axis: 1
  }
}

layer {
  name: "slice_coord_manifold"
  type: "Slice"
  bottom: "manifold_coord"
  top: "slice_coord_manifold1"
  top: "slice_coord_manifold2"
  top: "slice_coord_manifold3"
  top: "slice_coord_manifold4"
  slice_param {
    axis: 1
    slice_point: 1
    slice_point: 2
    slice_point: 3
  }
}
layer {
  name: "flatten_coord_manifold1"
  type: "Flatten"
  bottom: "slice_coord_manifold1"
  top: "flatten_coord_manifold1"
}
layer {
  name: "flatten_coord_manifold2"
  type: "Flatten"
  bottom: "slice_coord_manifold2"
  top: "flatten_coord_manifold2"
}
layer {
  name: "flatten_coord_manifold3"
  type: "Flatten"
  bottom: "slice_coord_manifold3"
  top: "flatten_coord_manifold3"
}
layer {
  name: "flatten_coord_manifold4"
  type: "Flatten"
  bottom: "slice_coord_manifold4"
  top: "flatten_coord_manifold4"
}


#----------------------------------------------------------------------------------------------------------------------#
#                                             VGG Feature extraction
#----------------------------------------------------------------------------------------------------------------------#

layer {
  bottom: "concat_data"
  top: "feat_conv1_1"
  name: "feat_conv1_1"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv1_1"
  top: "feat_conv1_1"
  name: "feat_relu1_1"
  type: "ReLU"
}
layer {
  bottom: "feat_conv1_1"
  top: "feat_conv1_2"
  name: "feat_conv1_2"
  type: "Convolution"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv1_2"
  top: "feat_conv1_2"
  name: "feat_relu1_2"
  type: "ReLU"
}
layer {
  bottom: "feat_conv1_2"
  top: "feat_pool1"
  name: "feat_pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "feat_pool1"
  top: "feat_conv2_1"
  name: "feat_conv2_1"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv2_1"
  top: "feat_conv2_1"
  name: "feat_relu2_1"
  type: "ReLU"
}
layer {
  bottom: "feat_conv2_1"
  top: "feat_conv2_2"
  name: "feat_conv2_2"
  type: "Convolution"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv2_2"
  top: "feat_conv2_2"
  name: "feat_relu2_2"
  type: "ReLU"
}
layer {
  bottom: "feat_conv2_2"
  top: "feat_pool2"
  name: "feat_pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "feat_pool2"
  top: "feat_conv3_1"
  name: "feat_conv3_1"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv3_1"
  top: "feat_conv3_1"
  name: "feat_relu3_1"
  type: "ReLU"
}
layer {
  bottom: "feat_conv3_1"
  top: "feat_conv3_2"
  name: "feat_conv3_2"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv3_2"
  top: "feat_conv3_2"
  name: "feat_relu3_2"
  type: "ReLU"
}
layer {
  bottom: "feat_conv3_2"
  top: "feat_conv3_3"
  name: "feat_conv3_3"
  type: "Convolution"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv3_3"
  top: "feat_conv3_3"
  name: "feat_relu3_3"
  type: "ReLU"
}
layer {
  bottom: "feat_conv3_3"
  top: "feat_pool3"
  name: "feat_pool3"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "feat_pool3"
  top: "feat_conv4_1"
  name: "feat_conv4_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv4_1"
  top: "feat_conv4_1"
  name: "feat_relu4_1"
  type: "ReLU"
}
layer {
  bottom: "feat_conv4_1"
  top: "feat_conv4_2"
  name: "feat_conv4_2"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv4_2"
  top: "feat_conv4_2"
  name: "feat_relu4_2"
  type: "ReLU"
}
layer {
  bottom: "feat_conv4_2"
  top: "feat_conv4_3"
  name: "feat_conv4_3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv4_3"
  top: "feat_conv4_3"
  name: "feat_relu4_3"
  type: "ReLU"
}
layer {
  bottom: "feat_conv4_3"
  top: "feat_pool4"
  name: "feat_pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "feat_pool4"
  top: "feat_conv5_1"
  name: "feat_conv5_1"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv5_1"
  top: "feat_conv5_1"
  name: "feat_relu5_1"
  type: "ReLU"
}
layer {
  bottom: "feat_conv5_1"
  top: "feat_conv5_2"
  name: "feat_conv5_2"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv5_2"
  top: "feat_conv5_2"
  name: "feat_relu5_2"
  type: "ReLU"
}
layer {
  bottom: "feat_conv5_2"
  top: "feat_conv5_3"
  name: "feat_conv5_3"
  type: "Convolution"
  convolution_param {
    num_output: 512
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_conv5_3"
  top: "feat_conv5_3"
  name: "feat_relu5_3"
  type: "ReLU"
}
layer {
  bottom: "feat_conv5_3"
  top: "feat_pool5"
  name: "feat_pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "feat_pool5"
  top: "feat_fc6"
  name: "feat_fc6"
  type: "InnerProduct"
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_fc6"
  top: "feat_fc6"
  name: "feat_relu6"
  type: "ReLU"
}
layer {
  bottom: "feat_fc6"
  top: "feat_fc6"
  name: "feat_drop6"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  bottom: "feat_fc6"
  top: "feat_fc7"
  name: "feat_fc7"
  type: "InnerProduct"
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
}
layer {
  bottom: "feat_fc7"
  top: "feat_fc7"
  name: "feat_relu7"
  type: "ReLU"
}
layer {
  bottom: "feat_fc7"
  top: "feat_fc7"
  name: "feat_drop7"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}


#----------------------------------------------------------------------------------------------------------------------#
#                                    Fully connected layers for each part
#----------------------------------------------------------------------------------------------------------------------#

layer {
  name: "feat_fc8_part1"
  bottom: "feat_fc7"
  top: "feat_fc8_part1"
  type: "InnerProduct"
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
}

layer {
  name: "feat_fc8_part2"
  bottom: "feat_fc7"
  top: "feat_fc8_part2"
  type: "InnerProduct"
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
}

layer {
  name: "feat_fc8_part3"
  bottom: "feat_fc7"
  top: "feat_fc8_part3"
  type: "InnerProduct"
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
}

layer {
  name: "feat_fc8_part4"
  bottom: "feat_fc7"
  top: "feat_fc8_part4"
  type: "InnerProduct"
  inner_product_param {
    num_output: 128
    weight_filler {
      type: "xavier"
    }
  }
  param {
    lr_mult: 10
    decay_mult: 1
  }
  param {
    lr_mult: 20
    decay_mult: 0
  }
}


#----------------------------------------------------------------------------------------------------------------------#
#                                    Manifold embedding layers for each part
#----------------------------------------------------------------------------------------------------------------------#

# Part 1
layer {
  name: "embedding_loss_part1"
  type: "EuclideanLoss"
  bottom: "feat_fc8_part1"
  bottom: "flatten_coord_manifold1"
  top: "embedding_loss_part1"
}

# Part 2
layer {
  name: "embedding_loss_part2"
  type: "EuclideanLoss"
  bottom: "feat_fc8_part2"
  bottom: "flatten_coord_manifold2"
  top: "embedding_loss_part2"
}

# Part 3
layer {
  name: "embedding_loss_part3"
  type: "EuclideanLoss"
  bottom: "feat_fc8_part3"
  bottom: "flatten_coord_manifold3"
  top: "embedding_loss_part3"
}

# Part 4
layer {
  name: "embedding_loss_part4"
  type: "EuclideanLoss"
  bottom: "feat_fc8_part4"
  bottom: "flatten_coord_manifold4"
  top: "embedding_loss_part4"
}

